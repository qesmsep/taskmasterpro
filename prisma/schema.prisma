// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  tasks         Task[]
  categories    Category[]
  attachments   Attachment[]
  communications Communication[]
  notifications Notification[]
  calendarIntegrations CalendarIntegration[]

  @@map("users")
}

model Category {
  id          String   @id @default(uuid())
  name        String
  color       String   @default("#007AFF")
  description String?
  userId      String @map("user_id")
  isDefault   Boolean  @default(false) @map("is_default")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]
  schedules CategorySchedule[]

  @@map("categories")
}

model CategorySchedule {
  id         String   @id @default(uuid())
  categoryId String   @map("category_id")
  dayOfWeek  Int      @map("day_of_week") // 0-6 (Sunday-Saturday)
  startHour  Int      @map("start_hour") // 0-23
  endHour    Int      @map("end_hour") // 0-23
  isActive   Boolean  @default(true) @map("is_active")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, dayOfWeek])
  @@map("category_schedules")
}

model TaskCreationStep {
  id          String   @id @default(uuid())
  taskId      String   @map("task_id")
  stepNumber  Int      @map("step_number")
  stepType    String   // 'basic_info', 'success_criteria', 'details', 'ai_review'
  data        Json     // Store step-specific data
  isCompleted Boolean  @default(false) @map("is_completed")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_creation_steps")
}

model CalendarIntegration {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  provider     String   // 'google', 'outlook'
  accessToken  String   @map("access_token")
  refreshToken String?  @map("refresh_token")
  expiresAt    DateTime? @map("expires_at")
  calendarId   String?  @map("calendar_id")
  isActive     Boolean  @default(true) @map("is_active")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("calendar_integrations")
}

model Task {
  id          String   @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime? @map("due_date")
  estimatedTime Int? @map("estimated_time") // in minutes
  actualTime   Int? @map("actual_time") // in minutes
  categoryId  String? @map("category_id")
  userId      String @map("user_id")
  parentId    String? @map("parent_id")
  responsibleParty String? @map("responsible_party")
  tags        String[] // JSON array of tags
  isRecurring Boolean  @default(false) @map("is_recurring")
  recurrenceRule String? @map("recurrence_rule") // RRULE format
  nextOccurrence DateTime? @map("next_occurrence")
  successCriteria String? @map("success_criteria") // What "done" looks like
  context     String? // Additional context and next steps
  aiSuggestions Json? @map("ai_suggestions") // AI-generated suggestions and subtasks
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  completedAt DateTime? @map("completed_at")

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id])
  parent      Task?    @relation("TaskHierarchy", fields: [parentId], references: [id])
  subtasks    Task[]   @relation("TaskHierarchy")
  dependencies TaskDependency[] @relation("DependentTask")
  dependents  TaskDependency[] @relation("DependencyTask")
  attachments Attachment[]
  communications Communication[]
  timeBlocks  TimeBlock[]
  notifications Notification[]
  creationSteps TaskCreationStep[]

  @@map("tasks")
}

model TaskDependency {
  id           String @id @default(uuid())
  dependentId  String @map("dependent_id")
  dependencyId String @map("dependency_id")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  dependent  Task @relation("DependentTask", fields: [dependentId], references: [id], onDelete: Cascade)
  dependency Task @relation("DependencyTask", fields: [dependencyId], references: [id], onDelete: Cascade)

  @@unique([dependentId, dependencyId])
  @@map("task_dependencies")
}

model TimeBlock {
  id          String   @id @default(uuid())
  taskId      String @map("task_id")
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("time_blocks")
}

model Attachment {
  id        String   @id @default(uuid())
  filename  String
  filepath  String
  filesize  Int
  mimetype  String
  taskId    String? @map("task_id")
  userId    String @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Communication {
  id        String   @id @default(uuid())
  type      CommunicationType
  subject   String?
  content   String
  fromEmail String? @map("from_email")
  toEmail   String? @map("to_email")
  messageId String? @map("message_id") // For email threading
  taskId    String? @map("task_id")
  userId    String @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("communications")
}

model Notification {
  id        String   @id @default(uuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  userId    String @map("user_id")
  taskId    String? @map("task_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED

  @@map("task_status")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT

  @@map("priority")
}

enum CommunicationType {
  EMAIL
  NOTE
  COMMENT

  @@map("communication_type")
}

enum NotificationType {
  DUE_DATE
  DEPENDENCY
  OVERDUE
  REMINDER

  @@map("notification_type")
}
