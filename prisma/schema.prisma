// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks         Task[]
  categories    Category[]
  attachments   Attachment[]
  communications Communication[]
  notifications Notification[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String
  color       String   @default("#007AFF")
  description String?
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks Task[]

  @@map("categories")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  estimatedTime Int? // in minutes
  actualTime   Int? // in minutes
  categoryId  String?
  userId      String
  parentId    String?
  responsibleParty String?
  tags        String[] // JSON array of tags
  isRecurring Boolean  @default(false)
  recurrenceRule String? // RRULE format
  nextOccurrence DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category    Category? @relation(fields: [categoryId], references: [id])
  parent      Task?    @relation("TaskHierarchy", fields: [parentId], references: [id])
  subtasks    Task[]   @relation("TaskHierarchy")
  dependencies TaskDependency[] @relation("DependentTask")
  dependents  TaskDependency[] @relation("DependencyTask")
  attachments Attachment[]
  communications Communication[]
  timeBlocks  TimeBlock[]
  notifications Notification[]

  @@map("tasks")
}

model TaskDependency {
  id           String @id @default(cuid())
  dependentId  String
  dependencyId String
  createdAt    DateTime @default(now())

  // Relations
  dependent  Task @relation("DependentTask", fields: [dependentId], references: [id], onDelete: Cascade)
  dependency Task @relation("DependencyTask", fields: [dependencyId], references: [id], onDelete: Cascade)

  @@unique([dependentId, dependencyId])
  @@map("task_dependencies")
}

model TimeBlock {
  id          String   @id @default(cuid())
  taskId      String
  startTime   DateTime
  endTime     DateTime
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("time_blocks")
}

model Attachment {
  id        String   @id @default(cuid())
  filename  String
  filepath  String
  filesize  Int
  mimetype  String
  taskId    String?
  userId    String
  createdAt DateTime @default(now())

  // Relations
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("attachments")
}

model Communication {
  id        String   @id @default(cuid())
  type      CommunicationType
  subject   String?
  content   String
  fromEmail String?
  toEmail   String?
  messageId String? // For email threading
  taskId    String?
  userId    String
  createdAt DateTime @default(now())

  // Relations
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("communications")
}

model Notification {
  id        String   @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean  @default(false)
  userId    String
  taskId    String?
  createdAt DateTime @default(now())

  // Relations
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task? @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum CommunicationType {
  EMAIL
  NOTE
  COMMENT
}

enum NotificationType {
  DUE_DATE
  DEPENDENCY
  OVERDUE
  REMINDER
}
